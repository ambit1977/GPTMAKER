name: カスタムGPT CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.9

jobs:
  # プロンプト静的解析
  lint-prompts:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: プロンプトファイル構文チェック
      run: |
        # YAMLファイルの構文チェック
        find . -name "*.yaml" -o -name "*.yml" | xargs -I {} sh -c 'echo "Checking {}"; python -c "import yaml; yaml.safe_load(open(\"{}\"))"'
        
        # JSONファイルの構文チェック  
        find . -name "*.json" | xargs -I {} sh -c 'echo "Checking {}"; python -c "import json; json.load(open(\"{}\"))"'
        
        # Markdownファイルのリンクチェック
        find . -name "*.md" | xargs -I {} echo "Markdown file: {}"

  # プロンプト単体テスト
  unit-test:
    runs-on: ubuntu-latest
    needs: lint-prompts
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: プロンプト単体テスト実行
      run: |
        python -m pytest tests/unit/ -v --junitxml=test-results-unit.xml
        
    - name: テスト結果アップロード
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: test-results-unit.xml

  # プロンプトビルド
  build-prompts:
    runs-on: ubuntu-latest
    needs: unit-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: ビルドスクリプト実行
      run: |
        python scripts/build_prompts.py
        
    - name: ビルド成果物確認
      run: |
        ls -la build/
        echo "=== メインプロンプト ==="
        cat build/main_prompt.txt
        echo "=== 設定ファイル ==="
        cat build/gpt_config.json
        
    - name: ビルド成果物アップロード
      uses: actions/upload-artifact@v3
      with:
        name: built-prompts
        path: build/

  # 統合テスト（開発環境）
  integration-test:
    runs-on: ubuntu-latest
    needs: build-prompts
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Selenium依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Chromeとドライバーのインストール
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # ChromeDriverのインストール
        CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f3 | cut -d '.' -f1)
        wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}/chromedriver_linux64.zip"
        unzip /tmp/chromedriver.zip -d /tmp/
        sudo mv /tmp/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
    - name: ビルド成果物ダウンロード
      uses: actions/download-artifact@v3
      with:
        name: built-prompts
        path: build/
        
    - name: 統合テスト実行
      env:
        CHATGPT_EMAIL: ${{ secrets.CHATGPT_EMAIL }}
        CHATGPT_PASSWORD: ${{ secrets.CHATGPT_PASSWORD }}
      run: |
        python -m pytest tests/integration/ -v --junitxml=test-results-integration.xml
        
    - name: テスト結果アップロード
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results-integration.xml

  # 開発環境デプロイ
  deploy-dev:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: ビルド成果物ダウンロード
      uses: actions/download-artifact@v3
      with:
        name: built-prompts
        path: build/
        
    - name: 開発環境デプロイ
      env:
        CHATGPT_EMAIL: ${{ secrets.CHATGPT_EMAIL }}
        CHATGPT_PASSWORD: ${{ secrets.CHATGPT_PASSWORD }}
      run: |
        pip install -r requirements.txt
        python scripts/chatgpt_deployer.py --config build/gpt_config.json --action update --name "MyGPT-Dev"

  # 本番環境デプロイ
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-prompts
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 本番デプロイ承認待機
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ secrets.APPROVERS }}
        minimum-approvals: 1
        issue-title: "本番環境デプロイ承認"
        issue-body: |
          ## 本番環境デプロイ申請
          
          **ブランチ**: ${{ github.ref }}
          **コミット**: ${{ github.sha }}
          **作成者**: ${{ github.actor }}
          
          ### 変更内容
          ${{ github.event.head_commit.message }}
          
          ### デプロイ内容確認
          - [ ] プロンプト内容の確認完了
          - [ ] テスト結果の確認完了
          - [ ] 影響範囲の確認完了
          
          承認する場合は "approved" とコメントしてください。
        
    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: ビルド成果物ダウンロード
      uses: actions/download-artifact@v3
      with:
        name: built-prompts
        path: build/
        
    - name: 本番環境デプロイ
      env:
        CHATGPT_EMAIL: ${{ secrets.CHATGPT_EMAIL }}
        CHATGPT_PASSWORD: ${{ secrets.CHATGPT_PASSWORD }}
      run: |
        pip install -r requirements.txt
        python scripts/chatgpt_deployer.py --config build/gpt_config.json --action update --name "MyGPT-Prod"
        
    - name: デプロイ通知
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 本番環境デプロイが完了しました'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: デプロイ失敗通知
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ 本番環境デプロイが失敗しました'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # パフォーマンステスト
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-prod
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: パフォーマンステスト実行
      env:
        CHATGPT_EMAIL: ${{ secrets.CHATGPT_EMAIL }}
        CHATGPT_PASSWORD: ${{ secrets.CHATGPT_PASSWORD }}
      run: |
        pip install -r requirements.txt
        python tests/performance/performance_test.py
        
    - name: テスト結果アップロード
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: performance-results.json
